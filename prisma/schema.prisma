// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  subscriptionPlan  String    @default("free")
  subscriptionStatus String?  @default("active")
  subscriptionEndDate DateTime?
  teamId            String?
  team              Team?     @relation(fields: [teamId], references: [id])
  role              String    @default("member")
  pages             Page[]
  files             File[]
  payments          Payment[]
  apiKeys           ApiKey[]
  apiRequests       ApiRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PageView {
  id        String   @id @default(cuid())
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  createdAt DateTime @default(now())
}

model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     Json
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  blocks      Block[]
  views       PageView[]
}

model Block {
  id        String   @id @default(cuid())
  type      String
  content   Json
  order     Int
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  size      Int
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        String   @id @default(cuid())
  name      String
  members   User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String
  status          String
  stripeSessionId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiRequest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String
  method    String
  status    Int
  createdAt DateTime @default(now())
} 