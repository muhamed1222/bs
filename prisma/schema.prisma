// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          UserRole  @default(USER)
  plan          PlanType  @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pages         Page[]
  apiKeys       ApiKey[]
  oauthAccounts OAuthAccount[]
}

model OAuthAccount {
  id            String   @id @default(cuid())
  provider      String
  providerId    String
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([provider, providerId])
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     Json
  isPublic    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  blocks      Block[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Block {
  id        String   @id @default(cuid())
  type      String
  content   Json
  order     Int
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  type        PlanType @id
  name        String
  description String
  price       Float
  features    Json
  limits      Json
}
